// digitsToNumber() converts a list of digits to a single int.
func digitsToNumber(digits []int, length int) int {
	number := digits[0]

	for i := 1; i < length; i++ {
		number = number*10 + digits[i]
	}

	return number
}

// countChildren() counts the number of children for this slen substring length.
// Returns index==0 if 1 or fewer children are found.
// Returns index==X if a second child is found, where X is the end position of the second child.
func countChildrenSum(digits []int, divisor, end, slen int) (int, int) {
	count := 0
	index := 0

	// Build the first string of digits 'slen' long.
	substring := digits[0]
	for j := 1; j < slen; j++ {
		substring += digits[j]
	}

	if substring%divisor == 0 {
		count++
	}

	// Add/remove digits to walk the string to the end of 'digits'.
	for i := 1; i <= end-slen+1; i++ {
		substring -= digits[i-1]
		substring += digits[i+slen-1]
		if substring%divisor == 0 {
			count++
			if count > 1 {
				index = i + slen - 1
				break
			}
		}
	}

	return count, index
}

func countChildrenSumSlow(digits []int, divisor, end, slen int) (int, int) {
	count := 0
	index := 0

	// TODO: Instead of building substring and then throwing it
	// away to build the next one, build it and then shift it.
	// substring := digits[i] digits[i+1] ... digits[i+slen]
	// for {
	//     substring -= digits[i]*10^slen + digits[i_1+slen]
	// }

	for i := 0; i <= end-slen+1; i++ {
		substring := 0
		j := 0
		for j = 0; j < slen; j++ {
			substring += digits[i+j]
		}
		if substring%divisor == 0 {
			count++
			if count > 1 {
				index = i + j - 1
				break
			}
		}
	}

	return count, index
}

// oneChildManual() returns the number of one-child numbers that have 'length' number of digits.
// It does it using brute force.
func oneChildManualChannel(length, divisor, targetLength int) int {
	count := 0

	// Due to the loop unrolling below, we need to exclude 1-digit numbers
	// from the evaluation (they would get double oneChildCounted).
	if length == 1 {
		panic("Really? Get a larger length, please.")
	}

	// Start at 1x10^length.
	digits := make([]int, length)
	digits[0] = 1
	fastForwardZero(digits, length)

	for {
		oneChildCount := 0
		index := 0
		next := false

		// Enumerate all single-digit substrings.
		for j := 0; j < length; j++ {
			if digits[j]%divisor == 0 {
				oneChildCount++
				if oneChildCount > 1 {
					index = j
					next = true
					break
				}
			}
		}

		if next {
			if !fastForwardIndex(digits, length, index) {
				break
			}
			continue
		}

		// Enumerate all remaining substrings and check for divisbility.
		for slen := 2; slen < length; slen++ {
			children := 0
			children, index = countChildren(digits, divisor, length-1, slen)
			oneChildCount += children
			if oneChildCount > 1 {
				next = true
				break
			}
		}

		if next {
			if index != 0 {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			} else {
				if !increment(digits, length) {
					break
				}
			}
			continue
		}

		// Check the entire number for divisibility.
		number := digitsToNumber(digits)
		if number%divisor == 0 {
			oneChildCount++
		}

		if oneChildCount <= 1 {
			cp := copy(digits)
			cp = append(cp, oneChildCount)
			count += expandCandidate(cp, length+1, divisor, targetLength)
		}

		if !increment(digits, length) {
			break
		}
	}

	return count
}

func copy(digits []int) []int {
	result := make([]int, 0)
	for i := 0; i < len(digits); i++ {
		result = append(result, digits[i])
	}
	return result
}

// oneChildManual9() returns the number of one-child numbers that have 'length' number of digits.
// It is specially tuned for length==9.
func oneChildManual9(length int) int {
	// Start at 1x10^length.
	digits := make([]int, length)
	digits[0] = 1
	fastForwardZero(digits, length)

	count := 0
	for {
		oneChildCount := 0
		index := 0
		next := false

		// Enumerate all single-digit substrings.
		for j := 0; j < length; j++ {
			if digits[j] == 0 || digits[j] == 9 {
				oneChildCount++
				if oneChildCount > 1 {
					index = j
					next = true
					break
				}
			}
		}

		if next {
			if !fastForwardIndex(digits, length, index) {
				break
			}
			continue
		}

		// Enumerate all remaining substrings and check for divisbility.
		for slen := 2; slen < length; slen++ {
			children := 0
			children, index = countChildrenSum(digits, length, length-1, slen)
			oneChildCount += children
			if oneChildCount > 1 {
				next = true
				break
			}
		}

		if next {
			if index != 0 {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			} else {
				if !increment(digits, length) {
					break
				}
			}
			continue
		}

		// Check the entire number for divisibility.
		number := digitsToNumber(digits)
		if number%length == 0 {
			oneChildCount++
		}

		if oneChildCount == 1 {
			count++
		}

		if !increment(digits, length) {
			break
		}
	}

	return count
}

// oneChildManual15() returns the number of one-child numbers that have 'length' number of digits.
// It is specially tuned for length==15.
//
// For a substring to be divisible by 15 it must end in 0 or 5 and it must also be
// divisible by 3.
// HOWEVER, if the substring ends in 0 then there will also be a substring that is
// just '0' and that means there are (at least) two children.
//
// Cases:
//     There are no 0's and no 5's.
//         It is not single-child (there are no children).
//     There are multiple 0's.
//         It is not single-child (there are too many children).
//         Because we use fastForwardZero this will never happen.
//     There are zero or one 0's and zero or more 5's.
//         Examine all substrings that end with 5 or 0.
//         If only one is a child then it is single-child.
func oneChildManual15(length int) int {
	// Start at 1x10^length.
	digits := make([]int, length)
	digits[0] = 1
	fastForwardZero(digits, length)

	count := 0
	util.CtrlT("count:", &count, digits)
	for {
		// Find all of the zeros and fives. There cannot be a 0
		// in digits[0] and if there is a 5 in digits[0] we
		// don't count it because it could only make a single-
		// digit substring and that would not be divisible by 15.
		zero := 0
		five := 0
		for i := 1; i < length; i++ {
			if digits[i] == 0 {
				zero++
			}
			if digits[i] == 5 {
				five++
			}
		}

		//     There are no 0's and no 5's.
		//         It is not single-child.
		if zero == 0 && five == 0 {
			// Increment to the next multiple of five.
			if digits[length-1] < 5 {
				digits[length-1] = 4
			} else {
				digits[length-1] = 9
			}
			if !increment(digits, length) {
				break
			}
			continue
		}

		// If there is a zero then then is (at least) one one-child
		// substring.
		oneChildCount := zero

		index := 0
		next := false

		//     There are zero or one 0's and zero or more 5's.
		//         Examine all substrings that end with 5 or 0.
		//         If only one is a child then it is single-child.

		// Find all substrings that end with 0 or 5. Test them for
		// divisibility by 3. No need to look at single-digit
		// substrings; start with 2-digit ones. This means
		// we can skip the first value in digits[].
		for i := 1; i < length; i++ {
			if digits[i] == 5 || digits[i] == 0 {
				sum := 0
				// Make all substrings of digits[]...digits[i].
				for j := i; j >= 0; j-- {
					// Substrings cannot start with a zero.
					// And, we have already accounted for a
					// zero as a single digit substring.
					if digits[j] == 0 {
						continue
					}
					sum += digits[j]
					if sum%3 == 0 {
						oneChildCount++
						if oneChildCount > 1 {
							next = true
							index = i
							break
						}
					}
				}
			}
			if next {
				break
			}
		}

		if next {
			if index != 0 {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			} else {
				if !increment(digits, length) {
					break
				}
			}
			continue
		}

		if oneChildCount == 1 {
			count++
		}

		if !increment(digits, length) {
			break
		}
	}

	return count
}

// oneChild() returns the number of one-child numbers that have 'length' number of digits.
// It does it using shortcuts.
func oneChild(length int) int {
	count := 0

	// Divisibility rules taken in part from:
	// https://en.wikipedia.org/wiki/Divisibility_rule
	switch length {
	case 1:
		// All 1-9 are one-child numbers because every sub-string
		// is divisble by 1 and there is only one sub-string.
		count = 9
	case 2:
		for i := 10; i <= 99; i++ {
			// If the second digit is even then there
			// are multiple children.
			if i%2 == 0 {
				continue
			}
			// If the first digit is even then there
			// is one child.
			if (i/10)%2 == 0 {
				count++
			}
		}
	case 3:
		// Number contains one of: { 0, 3, 6, 9 }
		//   and number does not sum to 3
		// Number does NOT contain one of: { 0, 3, 6, 9 }
		//   and number DOES sum to 3
		count = (3*6*6 - 18) + (6*4*6 - 18) + (6*6*4 - 18) + 6*3*1
	case 4:
		// If the tens digit is even, the ones digit must be 0, 4, or 8.
		// If the tens digit is odd, the ones digit must be 2 or 6.
		digits := make([]int, length)
		digits[0] = 1
		fastForwardZero(digits, length)
		for {
			child := 0
			// 1-digit.
			for j := 0; j < length; j++ {
				if digits[j] == 0 || digits[j] == 4 || digits[j] == 8 {
					child++
				}
			}
			// 2-digit; pair is at start of number.
			j := 0
			if digits[j]%2 == 0 {
				if digits[j+1] == 0 || digits[j+1] == 4 || digits[j+1] == 8 {
					child++
				}
			} else {
				if digits[j+1] == 2 || digits[j+1] == 6 {
					child++
				}
			}
			// 2-digit; pair is NOT at start of number.
			for j = 1; j < length-1; j++ {
				if digits[j]%2 == 0 {
					if digits[j+1] == 0 || digits[j+1] == 4 || digits[j+1] == 8 {
						child += 2 // The extra leading digits yield more combos.
					}
				} else {
					if digits[j+1] == 2 || digits[j+1] == 6 {
						child += 2 // The extra leading digits yield more combos.
					}
				}
			}

			if child == 1 {
				count++
			}

			if !increment(digits, length) {
				break
			}
		}
	case 5:
		// All numbers that begin with a 5 and have no other 5's or 0's in them.
		count = 1 * 8 * 8 * 8 * 8
	case 8:
		// Cases to check:
		//  The single digit is divisible by 8.
		//  The double digit is divisible by 8.
		//  The last three digits are divisible by 8.
		// There is no need to make a sequence longer than 4 digits.
		//
		// Time manually: user 0m16 (no strong need to optimize)
		fmt.Println("Falling back to manual:", length)
		count = oneChildManual(length, length)
	case 9:
		// The sum of the digits is divisible by 9.
		count = oneChildManual9(length)
	case 10:
		// If the candidate has a zero in it then there are
		// many children. If there are no zeroes then there
		// are no children. In neither case is there a one-
		// child number.
		count = 0
	case 15:
		count = oneChildManual15(length)
	case 16:
		// Cases to check:
		//  The single digit is divisible by 16 (only 0).
		//  The double digit is divisible by 16.
		//  The triple digit is divisible by 16.
		//  The last 4 digits are divisible by 16.
		// There is no need to make a sequence longer than 4 digits.
		digits := make([]int, length)
		digits[0] = 1
		fastForwardZero(digits, length)
		for {
			number := 0
			oneChildCount := 0
			index := 0
			next := false

			// 1-digit.
			for j := 0; j < length; j++ {
				if digits[j] == 0 {
					oneChildCount++
					if oneChildCount > 1 {
						next = true
						index = j
						break
					}
				}
			}

			if next {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			}

			// 2-digit and 3-digit.
			for j := 1; j < length-2; j++ {
				number = digits[j]*10 + digits[j+1]
				if number%length == 0 {
					oneChildCount++
					if oneChildCount > 1 {
						index = j + 1
						next = true
						break
					}
				}
				number = number*10 + digits[j+2]
				if number%length == 0 {
					oneChildCount++
					if oneChildCount > 1 {
						index = j + 2
						next = true
						break
					}
				}
			}

			if next {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			}

			// The very last 2-digit.
			number = digits[length-2]*10 + digits[length-1]
			if number%length == 0 {
				oneChildCount++
				if oneChildCount > 1 {
					if !increment(digits, length) {
						break
					}
					continue
				}
			}

			// 4-digit; at start of number.
			j := 0
			number = digits[j]*1000 + digits[j+1]*100 + digits[j+2]*10 + digits[j+3]
			if number%length == 0 {
				oneChildCount++
				if oneChildCount > 1 {
					index = j + 3
					// TODO: fastforwardindex
					if !fastForwardIndex(digits, length, index) {
						break
					}
					continue
				}
			}

			// 4-digit; NOT at start of number.
			for j = 1; j < length-3; j++ {
				number = digits[j]*1000 + digits[j+1]*100 + digits[j+2]*10 + digits[j+3]
				if number%length == 0 {
					oneChildCount++
					if oneChildCount > 1 {
						index = j + 3
						next = true
						break
					}
				}
			}

			if next {
				if !fastForwardIndex(digits, length, index) {
					break
				}
				continue
			}

			if oneChildCount == 1 {
				if count%(1000*1000*10) == 0 {
					fmt.Println(digits)
				}
				count++
			}

			if !increment(digits, length) {
				break
			}
		}
	default:
		fmt.Println("Falling back to manual:", length)
		count = oneChildManual(length, length)
	}

	return count
}

func expandCandidate(digits []int, length, divisor, targetLength int) int {
	c := make(chan []int, 1000*1000)
	defer close(c)
	var ok bool

	c <- digits

	count := 0
	oneChildCount := digits[length-1]

	fmt.Println(digits, length, divisor, targetLength, oneChildCount)

	if length >= targetLength {
		return 1
	}

	for {
		digits, ok = <-c
		if !ok {
			break
		}

		// TODO: ------v

		// Append 0-9 to the result. See if that is still maybe a one-child.
		for i := 0; i <= 9; i++ {
			digits[length-1] = i
			number := 0
			shift := 1
			for j := length - 1; j >= 0; j-- {
				number = number + shift*digits[j]
				shift *= 10
				// fmt.Println(digits, number, l)
				if number%divisor == 0 {
					oneChildCount++
					if oneChildCount > 1 {
						break
					}
				}
			}
			if oneChildCount <= 1 && length < targetLength {
				cp := copy(digits)
				cp = append(cp, oneChildCount)
				// fmt.Println("Push'n", cp)
				c <- cp
			}
		}

		// TODO: ------^
	}
	return count
}

// TODO: Explore this path...
// Removal of duplicate zeros can be applicable to all digit lengths, so maybe it
// could be done just once and then saved.
//
// concat() takes shorter (like 3-5 digits long) sequences that it knows are zero- or
// one-child and concatenates them in various arrangements to build up to larger
// numbers (like 11-19 digits long).
func concat() {
}

func strFastForward(s string, length int, index int) (string, bool) {
	if index >= length-1 {
		return strIncrement(s)
	}

	s = s[:index+1]
	ok := true
	s, ok = strIncrement(s)

	for i := index + 1; i < length; i++ {
		s += "0"
	}

	return s, ok
}

